<test>
    <SQLqueries>
        <query>
            <testID>Top-10-cities-by-PNI-deaths</testID>
            <queryText>
                <![CDATA[
                SELECT tags.city as 'city', tags.state as 'state',
                ISNULL(LOOKUP('us-region', tags.region), tags.region) AS 'region',
                sum(value) as 'pneumonia_influenza_deaths',
                LOOKUP('city-size', concat(tags.city, ',', tags.state)) AS 'population'
                FROM cdc.pneumonia_and_influenza_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                AND datetime > "2016-01-01T00:00:00.000Z"
                GROUP BY tags
                ORDER BY 'pneumonia_influenza_deaths' DESC
                LIMIT 10
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>JOIN</testID>
            <queryText>
                <![CDATA[
                SELECT t1.entity, t1.datetime, t1.value, t2.value
                FROM mpstat.cpu_busy t1
                JOIN mpstat.cpu_idle t2
                WHERE t1.datetime > now - 1 * hour
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/join.md#join</source>
        </query>
        <query>
            <testID>Top-10-cities-with-the-highest-percentage-of-deaths-caused-by-PNI</testID>
            <queryText>
                <![CDATA[
                SELECT tot.tags.city as 'city', tot.tags.state as 'state',
                LOOKUP('us-region', tot.tags.region) AS 'region',
                sum(tot.value) AS 'all_deaths',
                sum(pni.value) AS 'pneumonia_influenza_deaths',
                sum(pni.value)/sum(tot.value)*100 AS 'pneumonia_influenza_deaths, %',
                LOOKUP('city-size', CONCAT(tot.tags.city, ',', tot.tags.state)) AS 'population'
                FROM cdc.all_deaths tot
                JOIN cdc.pneumonia_and_influenza_deaths pni
                WHERE tot.entity = 'mr8w-325u' AND tot.tags.city IS NOT NULL
                AND tot.datetime > "2016-01-01T00:00:00.000Z" AND tot.value > 0
                GROUP BY tot.tags
                ORDER BY 'pneumonia_influenza_deaths, %' DESC, 'pneumonia_influenza_deaths' DESC
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>join--derived-series</testID>
            <queryText>
                <![CDATA[
                SELECT tot.entity, tot.datetime,
                tot.value/1024 "total",
                fre.value/1024 "free",
                (tot.value - fre.value)/1024 "used",
                (1-fre.value/tot.value)*100 "used_%"
                FROM "meminfo.memtotal" AS tot
                JOIN "meminfo.memfree" AS fre
                WHERE tot.datetime > now - 1 * MINUTE
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/join-derived-series.md#join---derived-series</source>
        </query>
        <query>
            <testID>Mathematical-Functions</testID>
            <queryText>
                <![CDATA[
                SELECT value, ABS(value), CEIL(value), FLOOR(value), ROUND(value), MOD(value, 3),
                POWER(value, 2), EXP(value), LN(value), LOG(10, value), SQRT(value),
                LN(value*2), MOD(CEIL(value)*2, 4)
                FROM mpstat.cpu_busy
                WHERE datetime >= now - 5 * minute
                AND FLOOR(value) > 10
                ORDER BY SQRT(value) DESC
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/select-math.md#mathematical-functions</source>
        </query>
        <query>
            <testID>Mathematical-Functions-2</testID>
            <queryText>
                <![CDATA[
                SELECT value, ABS(value), CEIL(value), FLOOR(value), ROUND(value), MOD(value, 3),
                POWER(value, 2), EXP(value), LN(value), LOG(10, value), SQRT(value),
                LN(value*2), MOD(CEIL(value)*2, 4)
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-12-01T12:00:30.000Z" AND "2016-12-01T12:05:30.000Z"
                AND FLOOR(value) > 10
                ORDER BY SQRT(value) DESC
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/select-math.md#mathematical-functions</source>
        </query>
        <query>
            <testID>Mathematical-Functions-3</testID>
            <queryText>
                <![CDATA[
                SELECT value, ABS(value), CEIL(value), FLOOR(value), ROUND(value), MOD(value, 3),
                POWER(value, 2), EXP(value), LN(value), LOG(10, value), SQRT(value),
                LN(value*2), MOD(CEIL(value)*2, 4)
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-11-01T12:00:30.000Z" AND "2016-11-01T12:05:30.000Z"
                AND FLOOR(value) > 10
                ORDER BY SQRT(value) DESC
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/select-math.md#mathematical-functions</source>
        </query>




        <query>
            <testID>Select-all-columns--query-with-series-tags</testID>
            <queryText>
                <![CDATA[
                SELECT *
                FROM df.disk_used
                WHERE entity = 'nurswghbs001'
                AND datetime > now - 5 * minute
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/select-all-columns.md#query-with-series-tags</source>
        </query>
        <query>
            <testID>Select-all-columns--query-with-series-tags-2</testID>
            <queryText>
                <![CDATA[
                SELECT *
                FROM df.disk_used
                WHERE entity = 'nurswghbs001'
                AND datetime BETWEEN "2016-12-01T12:00:30.000Z" AND "2016-12-01T12:05:30.000Z"
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/select-all-columns.md#query-with-series-tags</source>
        </query>
        <query>
            <testID>Select-all-columns--query-with-series-tags-3</testID>
            <queryText>
                <![CDATA[
                SELECT *
                FROM df.disk_used
                WHERE entity = 'nurswghbs001'
                AND datetime BETWEEN "2016-11-01T12:00:30.000Z" AND "2016-11-01T12:05:30.000Z"
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/select-all-columns.md#query-with-series-tags</source>
        </query>
        <query>
            <testID>ORDER-BY--Time</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, value
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN now - 1 * hour AND now
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/order-by-time.md#order-by-time</source>
        </query>
        <query>
            <testID>ORDER-BY--Time-2</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, value
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-12-01T11:00:30.000Z" AND "2016-12-01T12:00:30.000Z"
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/order-by-time.md#order-by-time</source>
        </query>
        <query>
            <testID>Aggregate--Average-Value</testID>
            <queryText>
                <![CDATA[
                SELECT avg(value)
                FROM mpstat.cpu_busy
                WHERE datetime >= current_day
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/aggregate.md#query</source>
        </query>
        <query>
            <testID>Aggregate--Average-Value-2</testID>
            <queryText>
                <![CDATA[
                SELECT avg(value)
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-12-01T00:00:01.000Z" AND "2016-12-01T23:59:55.000Z"
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/aggregate.md#query</source>
        </query>
        <query>
            <testID>Aggregate--Average-Value-3</testID>
            <queryText>
                <![CDATA[
                SELECT avg(value)
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-11-01T00:00:01.000Z" AND "2016-11-01T23:59:55.000Z"
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/aggregate.md#query</source>
        </query>
        <query>
            <testID>GROUP-BY--Query-with-ORDER-BY</testID>
            <queryText>
                <![CDATA[
                SELECT entity, avg(value)
                FROM mpstat.cpu_busy
                WHERE datetime > now - 1*hour
                GROUP BY entity
                ORDER BY avg(value) DESC
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/group-by-query-with-order-by.md#group-by-query-with-order-by</source>
        </query>
        <query>
            <testID>GROUP-BY--Query-with-ORDER-BY-2</testID>
            <queryText>
                <![CDATA[
                SELECT entity, avg(value)
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-12-01T11:00:30.000Z" AND "2016-12-01T12:00:30.000Z"
                GROUP BY entity
                ORDER BY avg(value) DESC
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/group-by-query-with-order-by.md#group-by-query-with-order-by</source>
        </query>
        <query>
            <testID>GROUP-BY--Query-with-ORDER-BY-3</testID>
            <queryText>
                <![CDATA[
                SELECT entity, avg(value)
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-11-01T11:00:30.000Z" AND "2016-11-01T12:00:30.000Z"
                GROUP BY entity
                ORDER BY avg(value) DESC
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/group-by-query-with-order-by.md#group-by-query-with-order-by</source>
        </query>
        <query>
            <testID>JOIN-2</testID>
            <queryText>
                <![CDATA[
                SELECT t1.entity, t1.datetime, t1.value, t2.value
                FROM mpstat.cpu_busy t1
                JOIN mpstat.cpu_idle t2
                WHERE t1.datetime BETWEEN "2016-12-01T11:00:30.000Z" AND "2016-12-01T12:00:30.000Z"
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/join.md#join</source>
        </query>
        <query>
            <testID>JOIN-3</testID>
            <queryText>
                <![CDATA[
                SELECT t1.entity, t1.datetime, t1.value, t2.value
                FROM mpstat.cpu_busy t1
                JOIN mpstat.cpu_idle t2
                WHERE t1.datetime BETWEEN "2016-11-01T11:00:30.000Z" AND "2016-11-01T12:00:30.000Z"
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/join.md#join</source>
        </query>
        <query>
            <testID>Filter-Series-with-String-Operators-->'val2'</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, value, tags.tag2
                FROM "m-metric1"
                WHERE datetime >= "2016-06-19T11:00:00.000Z"
                AND tags.tag2 > 'val2'
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/filter-operators-string.md#query--val2</source>
        </query>
        <query>
            <testID>Interpolate--Linear-Interpolation-1-Minute-Period-Multiple-Periods</testID>
            <queryText>
                <![CDATA[
                SELECT entity, date_format(PERIOD(1 minute)), COUNT(value)
                FROM mpstat.cpu_busy
                WHERE datetime >= '2016-06-03T09:20:00.000Z' AND datetime < '2016-06-03T09:50:00.000Z'
                AND entity = 'nurswghbs001'
                GROUP BY entity, PERIOD(1 minute, LINEAR)
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/interpolate.md#linear-interpolation-1-minute-period-multiple-periods</source>
        </query>
        <query>
            <testID>Partition-Row Number--First-Record-in-Each-Partition</testID>
            <queryText>
                <![CDATA[
                SELECT entity, datetime, value
                FROM mpstat.cpu_busy
                WHERE datetime >= "2016-06-18T12:00:00.000Z" AND datetime < "2016-06-18T12:00:30.000Z"
                WITH ROW_NUMBER(entity ORDER BY time) <= 1
                ORDER BY entity, time
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/partition-row-number.md#first-record-in-each-partition</source>
        </query>
        <query>
            <testID>Select-All-Series-Tags</testID>
            <queryText>
                <![CDATA[
                SELECT entity, datetime, value, tags.*
                FROM 'm-metric1'
                WHERE datetime >= "2016-06-19T11:00:00.000Z" and datetime < "2016-06-19T12:00:00.000Z"
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/select-all-tags.md#select-all-series-tags</source>
        </query>
        <query>
            <testID>all-instances-when-a-city-failed-to-report-pneumonia_and_influenza_deaths</testID>
            <queryText>
                <![CDATA[
                SELECT tot.datetime, tot.value AS 'total',
                ISNULL(pni.value, 'N/A') AS 'pneumonia/influenza'
                FROM cdc.all_deaths tot
                OUTER JOIN cdc.pneumonia_and_influenza_deaths pni
                WHERE tot.entity = 'mr8w-325u'
                AND tot.tags.city = 'Baton Rouge'
                AND pni.value IS NULL
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>Top-10-cities-by-all-deaths-in-the-current-year</testID>
            <queryText>
                <![CDATA[
                SELECT tags.city as 'city', tags.state as 'state',
                ISNULL(LOOKUP('us-region', tags.region), tags.region) AS 'region',
                sum(value) as 'all_deaths',
                LOOKUP('city-size', concat(tags.city, ',', tags.state)) AS 'population'
                FROM cdc.all_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                AND datetime > "2016-01-01T00:00:00.000Z"
                GROUP BY tags
                ORDER BY 'all_deaths' DESC
                LIMIT 10
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>Top-10-cities-with-the-highest-percentage-of-deaths-caused-by-PNI-for-the-last-12-months</testID>
            <queryText>
                <![CDATA[
                SELECT tot.tags.city as 'city', tot.tags.state as 'state',
                LOOKUP('us-region', tot.tags.region) AS 'region',
                sum(tot.value) AS 'all_deaths',
                sum(pni.value) AS 'pneumonia_influenza_deaths',
                sum(pni.value)/sum(tot.value)*100 AS 'pneumonia_influenza_deaths, %',
                LOOKUP('city-size', CONCAT(tot.tags.city, ',', tot.tags.state)) AS 'population'
                FROM cdc.all_deaths tot
                JOIN cdc.pneumonia_and_influenza_deaths pni
                WHERE tot.entity = 'mr8w-325u' AND tot.tags.city IS NOT NULL
                AND tot.datetime > now-1*YEAR AND tot.value > 0
                GROUP BY tot.tags
                ORDER BY 'pneumonia_influenza_deaths, %' DESC, 'pneumonia_influenza_deaths' DESC
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>Number-of-PNI-deaths-per-month-in-Midwest</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(time, 'yyyy MMM') as 'date',
                LOOKUP('us-region', tags.region) AS 'region',
                sum(value) as 'pneumonia_influenza_deaths'
                FROM cdc.pneumonia_and_influenza_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                AND tags.region = '3'
                AND datetime > now-5*year AND datetime < '2016-10-01T00:00:00Z'
                GROUP BY tags.region, period(1 MONTH)
                ORDER BY datetime desc, tags.region
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>Latest-weekly-PNI-readings-for-Boston</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, value, tags.*
                FROM cdc.pneumonia_and_influenza_deaths
                WHERE tags.city = 'Boston'
                ORDER BY datetime DESC
                LIMIT 10
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>Latest-PNI-and-total-readings-for-Boston-using-JOIN</testID>
            <queryText>
                <![CDATA[
                SELECT *
                FROM cdc.pneumonia_and_influenza_deaths pni
                JOIN cdc.all_deaths tot
                WHERE pni.tags.city = 'Boston'
                ORDER BY pni.datetime DESC
                LIMIT 10
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>Latest-PNI-and-total-readings-for-Boston-with-specific-tags</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, value, tags.city, tags.state, tags.region
                FROM cdc.pneumonia_and_influenza_deaths
                WHERE tags.city = 'Boston'
                ORDER BY datetime DESC
                LIMIT 10
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>Latest-PNI-and-total-readings-for-Boston-with-region-code-translated-to-region-name-using-a-Replacement-Table</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, value, tags.city, tags.state,
                LOOKUP('us-region', tags.region) AS 'region'
                FROM cdc.pneumonia_and_influenza_deaths
                WHERE tags.city = 'Boston'
                ORDER BY datetime DESC
                LIMIT 10
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>Monthly-totals-for-all-cities-in-region-for-a-given-time-range</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, sum(value),
                LOOKUP('us-region', tags.region) AS 'region'
                FROM cdc.pneumonia_and_influenza_deaths
                WHERE tags.region = '2'
                AND datetime >= '2016-01-01T00:00:00Z' AND datetime < '2016-10-01T00:00:00Z'
                GROUP BY tags.region, period(1 MONTH)
                ORDER BY datetime DESC
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>Cities-with-the-highest-mortality-rate</testID>
            <queryText>
                <![CDATA[
                SELECT tags.city as 'city', tags.state as 'state',
                ISNULL(LOOKUP('us-region', tags.region), tags.region) AS 'region',
                sum(value) as 'all_deaths',
                cast(LOOKUP('city-size', concat(tags.city, ',', tags.state))) AS 'population',
                sum(value)/cast(LOOKUP('city-size', concat(tags.city, ',', tags.state)))*1000 AS 'mortality_rate'
                FROM cdc.all_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                AND datetime >= '2015-01-01T00:00:00Z' AND datetime < '2016-01-01T00:00:00Z'
                GROUP BY tags
                ORDER BY mortality_rate DESC
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>Mortality-Rate-by-Age-Group-in-New-York-city-2010</testID>
            <queryText>
                <![CDATA[
                SELECT CAST(LOOKUP('new-york-city-2010-population', 'total')) AS 'population',
                sum(t1.value) AS 'infant_deaths',
                sum(t24.value) AS '1-24_deaths',
                sum(t44.value) AS '25-44_deaths',
                sum(t64.value) AS '45-64_deaths',
                sum(t65.value) AS '65+_deaths',
                sum(tot.value) AS 'all_deaths',
                sum(t1.value)/CAST(LOOKUP('new-york-city-2010-population', 'under-1'))*1000 AS 'infant_mortality_rate',
                sum(t24.value)/CAST(LOOKUP('new-york-city-2010-population', '1-24'))*1000 AS '1-24_mortality_rate',
                sum(t44.value)/CAST(LOOKUP('new-york-city-2010-population', '25-44'))*1000 AS '25-44_mortality_rate',
                sum(t64.value)/CAST(LOOKUP('new-york-city-2010-population', '45-64'))*1000 AS '45-64_mortality_rate',
                sum(t65.value)/CAST(LOOKUP('new-york-city-2010-population', '65+'))*1000 AS '65+_mortality_rate',
                sum(tot.value)/CAST(LOOKUP('new-york-city-2010-population', 'total'))*1000 AS 'total_mortality_rate'
                FROM cdc.all_deaths tot
                JOIN cdc._1_year t1
                JOIN cdc._1_24_years t24
                JOIN cdc._25_44_years t44
                JOIN cdc._54_64_years t64
                JOIN cdc._65_years t65
                WHERE tot.entity = 'mr8w-325u'
                AND tot.datetime >= '2010-01-01T00:00:00Z' AND tot.datetime < '2011-01-01T00:00:00Z'
                AND tot.tags.city = 'New York'
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>Multiple-summation-bug</testID>
            <queryText>
                <![CDATA[
                SELECT value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value+value
                FROM 'testmetric'
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://nur.axibase.com:41791/redmine/issues/3711</source>
        </query>
        <query>
            <testID>String-functions</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, UPPER(REPLACE(entity, 'nurswg', '')) as 'entity', value,
                SUBSTR(tags.file_system, LOCATE('vg', tags.file_system)) as fs
                FROM df.disk_used
                WHERE datetime > now - 1*minute
                AND LOWER(tags.file_system) LIKE '/dev/*'
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/tree/master/api/sql#string-functions</source>
        </query>
        <query>
            <testID>String-functions-2</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, UPPER(REPLACE(entity, 'nurswg', '')) as 'entity', value,
                SUBSTR(tags.file_system, LOCATE('vg', tags.file_system)) as fs
                FROM df.disk_used
                WHERE datetime BETWEEN "2016-12-01T12:00:30.000Z" AND "2016-12-01T12:01:30.000Z"
                AND LOWER(tags.file_system) LIKE '/dev/*'
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/tree/master/api/sql#string-functions</source>
        </query>
        <query>
            <testID>String-functions-3</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, UPPER(REPLACE(entity, 'nurswg', '')) as 'entity', value,
                SUBSTR(tags.file_system, LOCATE('vg', tags.file_system)) as fs
                FROM df.disk_used
                WHERE datetime BETWEEN "2016-11-01T12:00:30.000Z" AND "2016-11-01T12:01:30.000Z"
                AND LOWER(tags.file_system) LIKE '/dev/*'
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/tree/master/api/sql#string-functions</source>
        </query>
        <query>
            <testID>Partition--ROW-NUMBER-with-ORDER-BY-avg</testID>
            <queryText>
                <![CDATA[
                SELECT entity, tags.*, datetime, avg(value)
                FROM df.disk_used
                WHERE datetime > now - 1 * day
                AND tags.file_system LIKE '/dev/*'
                GROUP BY entity, tags, period(15 minute)
                WITH row_number(entity, tags ORDER BY avg(value) DESC) <= 3
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/partition-row-number-top-N-tags.md#partition---row_number-with-order-by-avg</source>
        </query>
        <query>
            <testID>Partition--ROW-NUMBER-with-ORDER-BY-avg-2</testID>
            <queryText>
                <![CDATA[
                SELECT entity, tags.*, datetime, avg(value)
                FROM df.disk_used
                WHERE datetime BETWEEN "2016-12-01T12:00:30.000Z" AND "2016-12-02T12:00:30.000Z"
                AND tags.file_system LIKE '/dev/*'
                GROUP BY entity, tags, period(15 minute)
                WITH row_number(entity, tags ORDER BY avg(value) DESC) <= 3
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/partition-row-number-top-N-tags.md#partition---row_number-with-order-by-avg</source>
        </query>
        <query>
            <testID>Partition--ROW-NUMBER-with-ORDER-BY-avg-3</testID>
            <queryText>
                <![CDATA[
                SELECT entity, tags.*, datetime, avg(value)
                FROM df.disk_used
                WHERE datetime BETWEEN "2016-11-01T12:00:30.000Z" AND "2016-11-02T12:00:30.000Z"
                AND tags.file_system LIKE '/dev/*'
                GROUP BY entity, tags, period(15 minute)
                WITH row_number(entity, tags ORDER BY avg(value) DESC) <= 3
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/partition-row-number-top-N-tags.md#partition---row_number-with-order-by-avg</source>
        </query>
        <query>
            <testID>average-for-recent-hour--cpu-busy</testID>
            <queryText>
                <![CDATA[
                SELECT entity, AVG(value)
                FROM mpstat.cpu_busy
                WHERE datetime > previous_month
                GROUP BY entity
                WITH time > last_time - 1 * HOUR
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/tree/master/api/sql#last_time-syntax</source>
        </query>
        <query>
            <testID>join--derived-series-2</testID>
            <queryText>
                <![CDATA[
                SELECT tot.entity, tot.datetime,
                tot.value/1024 "total",
                fre.value/1024 "free",
                (tot.value - fre.value)/1024 "used",
                (1-fre.value/tot.value)*100 "used_%"
                FROM "meminfo.memtotal" AS tot
                JOIN "meminfo.memfree" AS fre
                WHERE tot.datetime BETWEEN "2016-12-01T12:00:30.000Z" AND "2016-12-01T12:01:30.000Z"
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/join-derived-series.md#join---derived-series</source>
        </query>
        <query>
            <testID>join--derived-series-3</testID>
            <queryText>
                <![CDATA[
                SELECT tot.entity, tot.datetime,
                tot.value/1024 "total",
                fre.value/1024 "free",
                (tot.value - fre.value)/1024 "used",
                (1-fre.value/tot.value)*100 "used_%"
                FROM "meminfo.memtotal" AS tot
                JOIN "meminfo.memfree" AS fre
                WHERE tot.datetime BETWEEN "2016-11-01T12:00:30.000Z" AND "2016-11-01T12:01:30.000Z"
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/join-derived-series.md#join---derived-series</source>
        </query>
        <query>
            <testID>outer-join</testID>
            <queryText>
                <![CDATA[
                SELECT *
                FROM mpstat.cpu_busy
                OUTER JOIN df.disk_used
                WHERE mpstat.cpu_busy.datetime > current_hour
                AND df.disk_used.entity = 'nurswghbs001'
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/outer-join.md#outer-join</source>
        </query>
        <query>
            <testID>outer-join-2</testID>
            <queryText>
                <![CDATA[
                SELECT *
                FROM mpstat.cpu_busy
                OUTER JOIN df.disk_used
                WHERE mpstat.cpu_busy.datetime BETWEEN "2016-12-01T12:00:30.000Z" AND "2016-12-01T13:00:30.000Z"
                AND df.disk_used.entity = 'nurswghbs001'
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/outer-join.md#outer-join</source>
        </query>
        <query>
            <testID>outer-join-3</testID>
            <queryText>
                <![CDATA[
                SELECT *
                FROM mpstat.cpu_busy
                OUTER JOIN df.disk_used
                WHERE mpstat.cpu_busy.datetime BETWEEN "2016-11-01T12:00:30.000Z" AND "2016-11-01T13:00:30.000Z"
                AND df.disk_used.entity = 'nurswghbs001'
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/outer-join.md#outer-join</source>
        </query>
        <query>
            <testID>Filter-Results-by-Entity-Name</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, entity, value
                FROM mpstat.cpu_busy
                WHERE entity = 'nurswghbs001'
                AND datetime > current_hour
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/filter-by-entity.md#filter-results-by-entity-name</source>
        </query>
        <query>
            <testID>Filter-Results-by-Entity-Name-2</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, entity, value
                FROM mpstat.cpu_busy
                WHERE entity = 'nurswghbs001'
                AND datetime BETWEEN "2016-12-01T12:00:30.000Z" AND "2016-12-01T13:00:30.000Z"
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/filter-by-entity.md#filter-results-by-entity-name</source>
        </query>
        <query>
            <testID>Filter-Results-by-Entity-Name-3</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, entity, value
                FROM mpstat.cpu_busy
                WHERE entity = 'nurswghbs001'
                AND datetime BETWEEN "2016-11-01T12:00:30.000Z" AND "2016-11-01T13:00:30.000Z"
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/filter-by-entity.md#filter-results-by-entity-name</source>
        </query>
        <query>
            <testID>Filter-by-series-tag</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, value, tags.file_system
                FROM df.disk_used_percent
                WHERE  tags.file_system LIKE '/d*'
                AND datetime >= now - 1 * hour
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/filter-by-series-tag.md#filter-by-series-tag</source>
        </query>
        <query>
            <testID>Filter-by-series-tag-2</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, value, tags.file_system
                FROM df.disk_used_percent
                WHERE  tags.file_system LIKE '/d*'
                AND datetime BETWEEN "2016-12-01T12:00:30.000Z" AND "2016-12-01T13:00:30.000Z"
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/filter-by-series-tag.md#filter-by-series-tag</source>
        </query>
        <query>
            <testID>Filter-by-series-tag-3</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, value, tags.file_system
                FROM df.disk_used_percent
                WHERE  tags.file_system LIKE '/d*'
                AND datetime BETWEEN "2016-11-01T12:00:30.000Z" AND "2016-11-01T13:00:30.000Z"
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/filter-by-series-tag.md#filter-by-series-tag</source>
        </query>
        <query>
            <testID>string-functions-group-by-null</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, avg(value), ISNULL(entity.tags.environment, 'other') as environment
                FROM mpstat.cpu_busy
                WHERE datetime >= previous_hour
                GROUP BY PERIOD(1 hour), ISNULL(entity.tags.environment, 'other')
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/string-functions.md#group-by-null</source>
        </query>
        <query>
            <testID>string-functions-group-by-null-2</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, avg(value), ISNULL(entity.tags.environment, 'other') as environment
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-12-01T12:00:30.000Z" AND "2016-12-01T13:00:30.000Z"
                GROUP BY PERIOD(1 hour), ISNULL(entity.tags.environment, 'other')
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/string-functions.md#group-by-null</source>
        </query>
        <query>
            <testID>string-functions-group-by-null-3</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, avg(value), ISNULL(entity.tags.environment, 'other') as environment
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-11-01T12:00:30.000Z" AND "2016-11-01T13:00:30.000Z"
                GROUP BY PERIOD(1 hour), ISNULL(entity.tags.environment, 'other')
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/string-functions.md#group-by-null</source>
        </query>
        <query>
            <testID>string-functions-substring</testID>
            <queryText>
                <![CDATA[
                SELECT entity, datetime, value, tags.file_system, LOCATE('/', tags.file_system, 2), SUBSTR(tags.file_system, LOCATE('/', tags.file_system, 2))
                FROM disk_used
                WHERE datetime BETWEEN "2016-12-01T06:59:30.000Z" AND "2016-12-01T07:00:56.000Z"
                AND LOCATE('//', tags.file_system) != 1
                ORDER BY datetime
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/string-functions.md#substring</source>
        </query>
        <query>
            <testID>find-max-in-10-hours-periods-in-one-month--cpu-busy</testID>
            <queryText>
                <![CDATA[
                SELECT entity, datetime, MAX(value)
                FROM mpstat.cpu_busy
                WHERE datetime >= "2016-05-19T09:20:00Z" AND datetime < "2016-06-20T09:30:00Z"
                GROUP BY entity, PERIOD(10 HOUR)
                OPTION (ROW_MEMORY_THRESHOLD 300000)
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>count-records-in-5-hours-periods-with-interpolation--cpu-busy</testID>
            <queryText>
                <![CDATA[
                SELECT entity, date_format(PERIOD(5 hour)), COUNT(value)
                FROM mpstat.cpu_busy
                WHERE datetime >= '2016-05-03T09:20:00.000Z' AND datetime < '2016-06-03T09:50:00.000Z'
                GROUP BY entity, PERIOD(5 hour, PREVIOUS)
                OPTION (ROW_MEMORY_THRESHOLD 900000)
                ]]>
            </queryText>
            <loops>60</loops>
        </query>
        <query>
            <testID>ticket-3721--without-like</testID>
            <queryText>
                <![CDATA[
                SELECT count(*)
                FROM cdc.all_deaths
                WHERE entity = 'mr8w-325u'
                AND tags.city = 'Philadelphia'
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://nur.axibase.com:41791/redmine/issues/3721</source>
        </query>
        <query>
            <testID>ticket-3721--with-like</testID>
            <queryText>
                <![CDATA[
                SELECT count(*)
                FROM cdc.all_deaths
                WHERE entity = 'mr8w-325u'
                AND tags.city LIKE 'Philadelphia'
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://nur.axibase.com:41791/redmine/issues/3721</source>
        </query>
        <query>
            <testID>ticket-3721--with-like-*</testID>
            <queryText>
                <![CDATA[
                SELECT count(*)
                FROM cdc.all_deaths
                WHERE entity = 'mr8w-325u'
                AND tags.city LIKE 'Philadelphia*'
                ]]>
            </queryText>
            <loops>60</loops>
            <source>https://nur.axibase.com:41791/redmine/issues/3721</source>
        </query>



        <query>
            <testID>Select-all-columns--query-with-series-tags--long</testID>
            <queryText>
                <![CDATA[
                SELECT *
                FROM df.disk_used
                WHERE entity = 'nurswghbs001'
                AND datetime > now - 5 * day
                ORDER BY datetime
                OPTION (ROW_MEMORY_THRESHOLD 15000000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/select-all-columns.md#query-with-series-tags</source>
        </query>
        <query>
            <testID>ORDER-BY--Time--long</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, value
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN now - 20 * day AND now
                ORDER BY datetime
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/order-by-time.md#order-by-time</source>
        </query>
        <query>
            <testID>ORDER-BY--Time-3</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, value
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-11-01T11:00:30.000Z" AND "2016-12-01T12:00:30.000Z"
                ORDER BY datetime
                OPTION (ROW_MEMORY_THRESHOLD 500000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/order-by-time.md#order-by-time</source>
        </query>
        <query>
            <testID>Mathematical-Functions--long</testID>
            <queryText>
                <![CDATA[
                SELECT value, ABS(value), CEIL(value), FLOOR(value), ROUND(value), MOD(value, 3),
                POWER(value, 2), EXP(value), LN(value), LOG(10, value), SQRT(value),
                LN(value*2), MOD(CEIL(value)*2, 4)
                FROM mpstat.cpu_busy
                WHERE datetime >= now - 5 * day
                AND FLOOR(value) > 10
                ORDER BY SQRT(value) DESC
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/select-math.md#mathematical-functions</source>
        </query>
        <query>
            <testID>outer-join--long</testID>
            <queryText>
                <![CDATA[
                SELECT *
                FROM mpstat.cpu_busy
                OUTER JOIN df.disk_used
                WHERE mpstat.cpu_busy.datetime > now - 3 * day
                AND df.disk_used.entity = 'nurswghbs001'
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/outer-join.md#outer-join</source>
        </query>
        <query>
            <testID>count-records-in-10-hours-periods--cpu-busy</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, count(value)
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-11-01T12:00:00.000Z" AND "2016-12-25T12:00:00.000Z"
                GROUP BY PERIOD(10 hour)
                ORDER BY datetime
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>JOIN--long</testID>
            <queryText>
                <![CDATA[
                SELECT t1.entity, t1.datetime, t1.value, t2.value
                FROM mpstat.cpu_busy t1
                JOIN mpstat.cpu_idle t2
                WHERE t1.datetime BETWEEN "2016-11-01T12:00:00.000Z" AND "2016-12-13T12:00:00.000Z"
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/join.md#join</source>
        </query>
        <query>
            <testID>count-records-in-10-hours-periods--cpu-busy--long</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, count(value)
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-11-01T12:00:00.000Z" AND "2016-12-25T12:00:00.000Z"
                GROUP BY PERIOD(10 day)
                ORDER BY datetime
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>string-functions-group-by-null--long</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, avg(value), ISNULL(entity.tags.environment, 'other') as environment
                FROM mpstat.cpu_busy
                WHERE datetime BETWEEN "2016-11-01T12:00:00.000Z" AND "2016-12-25T12:00:00.000Z"
                GROUP BY PERIOD(1 hour), ISNULL(entity.tags.environment, 'other')
                ORDER BY datetime
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/string-functions.md#group-by-null</source>
        </query>
        <query>
            <testID>query-from-ticket-3670</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(time, 'yyyy-MM-dd') as 'date',
                tags.city, tags.state, tags.region, sum(value),
                LOOKUP('city-size', concat(tags.city, ',', tags.state)) AS 'population'
                FROM cdc.all_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                GROUP BY entity, tags, datetime
                WITH row_number(entity, tags ORDER BY datetime desc) <= 1
                ORDER BY sum(value) desc
                LIMIT 5
                OPTION (ROW_MEMORY_THRESHOLD 300000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://nur.axibase.com:41791/redmine/issues/3670</source>
        </query>
        <query>
            <testID>2016-mortality-rates</testID>
            <queryText>
                <![CDATA[
                SELECT tot.tags.city as 'city', tot.tags.state as 'state',
                ISNULL(LOOKUP('us-region', tot.tags.region), tot.tags.region) AS 'region',
                sum(tot.value - t24.value - t44.value - t64.value - t64o.value) as 'other_deaths',
                sum(t24.value) as '1-24_deaths',
                sum(t44.value) as '24-44_deaths',
                sum(t64.value) as '44-64_deaths',
                sum(t64o.value) as '64+_deaths',
                sum(tot.value) as 'all_deaths',
                cast(LOOKUP('city-size', concat(tot.tags.city, ',', tot.tags.state))) AS 'population',
                sum(tot.value - t24.value - t44.value - t64.value - t64o.value)/cast(LOOKUP('city-size', concat(tot.tags.city, ',', tot.tags.state)))*1000 AS 'other_mortality_rate',
                sum(t24.value)/cast(LOOKUP('city-size', concat(tot.tags.city, ',', tot.tags.state)))*1000 AS '1_24_mortality_rate',
                sum(t64o.value)/cast(LOOKUP('city-size', concat(tot.tags.city, ',', tot.tags.state)))*1000 AS '64_older_mortality_rate',
                sum(tot.value)/cast(LOOKUP('city-size', concat(tot.tags.city, ',', tot.tags.state)))*1000 AS 'total_mortality_rate'
                FROM cdc.all_deaths tot
                JOIN cdc._1_24_years t24
                JOIN cdc._25_44_years t44
                JOIN cdc._54_64_years t64
                JOIN cdc._65_years t64o
                WHERE tot.entity = 'mr8w-325u' and tot.tags.city IS NOT NULL
                AND tot.datetime >= '2015-01-01T00:00:00Z' AND tot.datetime < '2016-01-01T00:00:00Z'
                GROUP BY tot.tags, tot.period(1 year)
                HAVING sum(tot.value) > 0
                ORDER BY 'total_mortality_rate' desc
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>New-York-Mortality-Rate-history,-using-interpolated-population-size</testID>
            <queryText>
                <![CDATA[
                SELECT tot.datetime, tot.tags.city as 'city', tot.tags.state as 'state',
                ISNULL(LOOKUP('us-region', tot.tags.region), tot.tags.region) AS 'region',
                sum(tot.value - t24.value - t44.value - t64.value - t64o.value) as 'other_deaths',
                sum(t24.value) as '1-24_deaths',
                sum(t44.value) as '24-44_deaths',
                sum(t64.value) as '44-64_deaths',
                sum(t64o.value) as '64+_deaths',
                sum(tot.value) as 'all_deaths',
                sum(tot.value - t24.value - t44.value - t64.value - t64o.value)/avg(pop.value)*1000 AS 'other_mortality_rate',
                sum(t24.value)/avg(pop.value)*1000 AS '1_24_mortality_rate',
                sum(t64o.value)/avg(pop.value)*1000 AS '64_older_mortality_rate',
                sum(tot.value)/avg(pop.value)*1000 AS 'total_mortality_rate',
                cast(LOOKUP('city-size', concat(tot.tags.city, ',', tot.tags.state))) AS '2015 population',
                avg(pop.value) AS 'population'
                FROM cdc.all_deaths tot
                JOIN cdc._1_24_years t24
                JOIN cdc._25_44_years t44
                JOIN cdc._54_64_years t64
                JOIN cdc._65_years t64o
                JOIN us.population pop
                WHERE tot.entity = 'mr8w-325u' and tot.tags.city IS NOT NULL
                AND tot.datetime >= '1970-01-01T00:00:00Z' AND tot.datetime < '2016-01-01T00:00:00Z'
                AND tot.tags.city = 'New York'
                GROUP BY tot.tags, tot.period(1 year)
                HAVING sum(tot.value) > 0
                WITH INTERPOLATE (1 WEEK, LINEAR, INNER, EXTEND, START_TIME)
                ORDER BY tot.tags.city, tot.datetime
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>Total-PNI-deaths-in-January-for-region-3</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(time, 'yyyy MMM') as 'date',
                LOOKUP('us-region', tags.region) AS 'region',
                sum(value) as 'pneumonia_influenza_deaths'
                FROM cdc.pneumonia_and_influenza_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                AND tags.region = '3'
                AND date_format(time, 'MMM') = 'Jan'
                GROUP BY tags.region, period(1 MONTH)
                ORDER BY datetime, tags.region
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>Mortality-rates-in-New-York-(fixed-pop-size,-provisional)</testID>
            <queryText>
                <![CDATA[
                SELECT tot.datetime, tot.tags.city as 'city', tot.tags.state as 'state',
                ISNULL(LOOKUP('us-region', tot.tags.region), tot.tags.region) AS 'region',
                sum(tot.value - t24.value - t44.value - t64.value - t64o.value) as 'other_deaths',
                sum(t24.value) as '1-24_deaths',
                sum(t44.value) as '24-44_deaths',
                sum(t64.value) as '44-64_deaths',
                sum(t64o.value) as '64+_deaths',
                sum(tot.value) as 'all_deaths',
                cast(LOOKUP('city-size', concat(tot.tags.city, ',', tot.tags.state))) AS 'population',
                sum(tot.value - t24.value - t44.value - t64.value - t64o.value)/cast(LOOKUP('city-size', concat(tot.tags.city, ',', tot.tags.state)))*1000 AS 'other_mortality_rate',
                sum(t24.value)/cast(LOOKUP('city-size', concat(tot.tags.city, ',', tot.tags.state)))*1000 AS '1_24_mortality_rate',
                sum(t64o.value)/cast(LOOKUP('city-size', concat(tot.tags.city, ',', tot.tags.state)))*1000 AS '64_older_mortality_rate',
                sum(tot.value)/cast(LOOKUP('city-size', concat(tot.tags.city, ',', tot.tags.state)))*1000 AS 'total_mortality_rate'
                FROM cdc.all_deaths tot
                JOIN cdc._1_24_years t24
                JOIN cdc._25_44_years t44
                JOIN cdc._54_64_years t64
                JOIN cdc._65_years t64o
                WHERE tot.entity = 'mr8w-325u' and tot.tags.city IS NOT NULL
                AND tot.datetime >= '1970-01-01T00:00:00Z' AND tot.datetime < '2016-01-01T00:00:00Z'
                and tot.tags.city = 'New York'
                GROUP BY tot.tags, tot.period(1 year)
                HAVING sum(tot.value) > 0
                ORDER BY tot.tags.city, tot.datetime
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>Top-3-deadliest-Januaries-in-the-region</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(time, 'yyyy MMM') as 'date',
                LOOKUP('us-region', tags.region) AS 'region',
                sum(value) as 'pneumonia_influenza_deaths'
                FROM cdc.pneumonia_and_influenza_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                AND tags.region = '3'
                AND date_format(time, 'MMM') = 'Jan'
                GROUP BY tags.region, period(1 MONTH)
                ORDER BY sum(value) desc
                LIMIT 3
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>Latest-PNI-and-total-readings-for-Boston-with-total-for-all-cities-in-a-given-region</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, sum(value),
                LOOKUP('us-region', tags.region) AS 'region'
                FROM cdc.pneumonia_and_influenza_deaths
                WHERE tags.region = '2'
                GROUP BY tags.region, datetime
                ORDER BY datetime DESC
                LIMIT 10
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>Row-memory-threshold</testID>
            <queryText>
                <![CDATA[
                SELECT entity, datetime, avg(value), tags
                FROM df.disk_used
                WHERE datetime > current_day
                GROUP BY entity, tags, PERIOD(2 HOUR)
                ORDER BY entity, tags.file_system, datetime
                OPTION (ROW_MEMORY_THRESHOLD 10000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/tree/master/api/sql#row_memory_threshold-option</source>
        </query>
        <query>
            <testID>Row-memory-threshold-2</testID>
            <queryText>
                <![CDATA[
                SELECT entity, datetime, avg(value), tags
                FROM df.disk_used
                WHERE datetime BETWEEN "2016-12-01T12:00:30.000Z" AND "2016-12-02T12:00:30.000Z"
                GROUP BY entity, tags, PERIOD(2 HOUR)
                ORDER BY entity, tags.file_system, datetime
                OPTION (ROW_MEMORY_THRESHOLD 10000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/tree/master/api/sql#row_memory_threshold-option</source>
        </query>
        <query>
            <testID>Row-memory-threshold-3</testID>
            <queryText>
                <![CDATA[
                SELECT entity, datetime, avg(value), tags
                FROM df.disk_used
                WHERE datetime BETWEEN "2016-11-01T12:00:30.000Z" AND "2016-11-02T12:00:30.000Z"
                GROUP BY entity, tags, PERIOD(2 HOUR)
                ORDER BY entity, tags.file_system, datetime
                OPTION (ROW_MEMORY_THRESHOLD 10000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/tree/master/api/sql#row_memory_threshold-option</source>
        </query>
        <query>
            <testID>verification-of-population-table</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(time, 'yyyy-MM-dd') as 'date',
                tags.city, tags.state, tags.region, sum(value),
                LOOKUP('city-size', concat(tags.city, ',', tags.state)) AS 'population'
                FROM cdc.all_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                GROUP BY entity, tags, datetime
                WITH row_number(entity, tags ORDER BY datetime desc) <= 1
                --WITH time >= last_time - 1*week
                ORDER BY sum(value) desc
                OPTION (ROW_MEMORY_THRESHOLD 300000)
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>Partition-Row-Number--First-Record-in-Each-Partition--long</testID>
            <queryText>
                <![CDATA[
                SELECT entity, datetime, value
                FROM mpstat.cpu_busy
                WHERE datetime >= "2016-05-01T12:00:00.000Z" AND datetime < "2016-08-31T12:00:30.000Z"
                WITH ROW_NUMBER(entity ORDER BY time) <= 1
                ORDER BY entity, time
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/partition-row-number.md#first-record-in-each-partition</source>
        </query>
        <query>
            <testID>count-records-in-5-hours-periods-with-interpolation--cpu-busy--long</testID>
            <queryText>
                <![CDATA[
                SELECT entity, date_format(PERIOD(5 hour)), COUNT(value)
                FROM mpstat.cpu_busy
                WHERE datetime >= '2016-04-03T09:20:00.000Z' AND datetime < '2016-07-15T09:50:00.000Z'
                GROUP BY entity, PERIOD(5 hour, PREVIOUS)
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>Thomas's-query-1</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(time, 'yyyy-MM-dd') as 'date',
                tags.city, tags.state, tags.region, sum(value),
                LOOKUP('city-size', concat(tags.city, ',', tags.state)) AS 'population'
                FROM cdc.all_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                GROUP BY entity, tags, datetime
                WITH row_number(entity, tags ORDER BY datetime desc) <= 1
                ORDER BY sum(value) desc
                OPTION (ROW_MEMORY_THRESHOLD 300000)
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>find-max-in-10-hours-periods-in-four-month--cpu-busy</testID>
            <queryText>
                <![CDATA[
                SELECT entity, datetime, MAX(value)
                FROM mpstat.cpu_busy
                WHERE datetime >= "2016-02-19T09:20:00Z" AND datetime < "2016-06-20T09:30:00Z"
                GROUP BY entity, PERIOD(10 HOUR)
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>Select-count--cpu-busy</testID>
            <queryText>
                <![CDATA[
                SELECT count(*)
                FROM mpstat.cpu_busy
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>select-average--cpu-busy</testID>
            <queryText>
                <![CDATA[
                SELECT avg(value)
                FROM mpstat.cpu_busy
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>Aggregate--Average-Value--long</testID>
            <queryText>
                <![CDATA[
                SELECT avg(value)
                FROM mpstat.cpu_busy
                WHERE datetime >= now - 2 * year
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/aggregate.md#query</source>
        </query>
        <query>
            <testID>select-max--cpu-busy</testID>
            <queryText>
                <![CDATA[
                SELECT max(value)
                FROM mpstat.cpu_busy
                ]]>
            </queryText>
            <loops>20</loops>
        </query>
        <query>
            <testID>String-functions--long</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, UPPER(REPLACE(entity, 'nurswg', '')) as 'entity', value,
                SUBSTR(tags.file_system, LOCATE('vg', tags.file_system)) as fs
                FROM df.disk_used
                WHERE datetime BETWEEN "2016-12-01T12:00:00.000Z" AND "2016-12-14T12:00:00.000Z"
                AND LOWER(tags.file_system) LIKE '/dev/*'
                ORDER BY datetime
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>20</loops>
            <source>https://github.com/axibase/atsd-docs/tree/master/api/sql#string-functions</source>
        </query>



        <query>
            <testID>join--derived-series--long</testID>
            <queryText>
                <![CDATA[
                SELECT tot.entity, tot.datetime,
                tot.value/1024 "total",
                fre.value/1024 "free",
                (tot.value - fre.value)/1024 "used",
                (1-fre.value/tot.value)*100 "used_%"
                FROM "meminfo.memtotal" AS tot
                JOIN "meminfo.memfree" AS fre
                WHERE tot.datetime BETWEEN "2016-11-01T12:00:00.000Z" AND "2016-12-13T12:00:00.000Z"
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>10</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/join-derived-series.md#join---derived-series</source>
        </query>
        <query>
            <testID>Order-rows-by-date-and-city</testID>
            <queryText>
                <![CDATA[
                SELECT *
                FROM cdc.all_deaths tot
                ORDER BY datetime, tags.city
                LIMIT 10
                OPTION (ROW_MEMORY_THRESHOLD 300000)
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>Interpolate--Linear-Interpolation-1-Minute-Period-Multiple-Periods--long</testID>
            <queryText>
                <![CDATA[
                SELECT entity, date_format(PERIOD(1 second)), COUNT(value)
                FROM mpstat.cpu_busy
                WHERE datetime >= '2016-05-01T09:20:00.000Z' AND datetime < '2016-07-03T09:50:00.000Z'
                AND entity = 'nurswghbs001'
                GROUP BY entity, PERIOD(1 second, LINEAR)
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>10</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/interpolate.md#linear-interpolation-1-minute-period-multiple-periods</source>
        </query>
        <query>
            <testID>select-count--read-rate</testID>
            <queryText>
                <![CDATA[
                select count(*)
                from iostat.read_rate
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>verification-of-region-table</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(time, 'yyyy-MM-dd') as 'date',
                tags.city as 'city', tags.state as 'state',
                ISNULL(LOOKUP('us-region', tags.region), tags.region) AS 'region',
                value as 'all_deaths',
                LOOKUP('city-size', concat(tags.city, ',', tags.state)) AS 'population'
                FROM cdc.all_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                WITH row_number(tags ORDER BY value desc) <= 1
                ORDER BY value desc
                OPTION (ROW_MEMORY_THRESHOLD 300000)
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>The-most-deadliest-week-by-city</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(time, 'yyyy-MM-dd') as 'date',
                tags.city as 'city', tags.state as 'state',
                ISNULL(LOOKUP('us-region', tags.region), tags.region) AS 'region',
                value as 'all_deaths',
                LOOKUP('city-size', concat(tags.city, ',', tags.state)) AS 'population'
                FROM cdc.all_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                WITH row_number(tags ORDER BY value desc, time desc) <= 1
                ORDER BY value desc
                OPTION (ROW_MEMORY_THRESHOLD 300000)
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>The-deadliest-PNI-month-by-region</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(time, 'MMM') AS 'Month',
                LOOKUP('us-region', tags.region) AS 'region',
                sum(value) as 'pneumonia_influenza_deaths'
                FROM cdc.pneumonia_and_influenza_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                GROUP BY tags.region, date_format(time, 'MMM')
                ORDER BY sum(value) DESC
                OPTION (ROW_MEMORY_THRESHOLD 300000)
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>The-most-deadliest-week-due-to-pneumonia-and-influenza-by-city</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(time, 'yyyy-MM-dd') as 'date',
                tags.city as 'city', tags.state as 'state',
                ISNULL(LOOKUP('us-region', tags.region), tags.region) AS 'region',
                value as 'pneumonia_influenza_deaths',
                LOOKUP('city-size', concat(tags.city, ',', tags.state)) AS 'population'
                FROM cdc.pneumonia_and_influenza_deaths t1
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL
                WITH row_number(tags ORDER BY value desc, time desc) <= 1
                ORDER BY value desc
                OPTION (ROW_MEMORY_THRESHOLD 300000)
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>The-least-deadliest-week-by-city</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(time, 'yyyy-MM-dd') AS 'date',
                tags.city AS 'city', tags.state AS 'state',
                ISNULL(LOOKUP('us-region', tags.region), tags.region) AS 'region',
                value AS 'all_deaths',
                LOOKUP('city-size', concat(tags.city, ',', tags.state)) AS 'population'
                FROM cdc.all_deaths
                WHERE entity = 'mr8w-325u' and tags.city IS NOT NULL AND value > 0
                WITH row_number(tags ORDER BY value, time DESC) <= 1
                ORDER BY 'date' DESC
                OPTION (ROW_MEMORY_THRESHOLD 300000)
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>select-count--collectd-df-space-used</testID>
            <queryText>
                <![CDATA[
                select count(*)
                from "collectd.df.space.used"
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>SELECT-entity-datetime-value--cpu-busy</testID>
            <queryText>
                <![CDATA[
                SELECT entity, datetime, value
                FROM mpstat.cpu_busy
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>select-count--java-method-invoke-average</testID>
            <queryText>
                <![CDATA[
                select count(*)
                from "java_method_invoke_average"
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>select-with-maths--cpu-busy</testID>
            <queryText>
                <![CDATA[
                SELECT time, value, value+0
                FROM mpstat.cpu_busy
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>select-count--disk-used</testID>
            <queryText>
                <![CDATA[
                select count(*)
                from df.disk_used
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>Top-10-cities-with-the-highest-percentage-of-deaths-caused-by-PNI-for-entire-period-since-1970</testID>
            <queryText>
                <![CDATA[
                SELECT tot.tags.city as 'city', tot.tags.state as 'state',
                LOOKUP('us-region', tot.tags.region) AS 'region',
                sum(tot.value) AS 'all_deaths',
                sum(pni.value) AS 'pneumonia_influenza_deaths',
                sum(pni.value)/sum(tot.value)*100 AS 'pneumonia_influenza_deaths, %',
                LOOKUP('city-size', CONCAT(tot.tags.city, ',', tot.tags.state)) AS 'population'
                FROM cdc.all_deaths tot
                JOIN cdc.pneumonia_and_influenza_deaths pni
                WHERE tot.entity = 'mr8w-325u' AND tot.tags.city IS NOT NULL
                AND tot.value > 0
                GROUP BY tot.tags
                ORDER BY 'pneumonia_influenza_deaths, %' DESC, 'pneumonia_influenza_deaths' DESC
                OPTION (ROW_MEMORY_THRESHOLD 600000)
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>The-deadliest-influenza-weeks</testID>
            <queryText>
                <![CDATA[
                SELECT date_format(tot.time, 'yyyy-MM-dd') as 'date',
                tot.tags.city as 'city', tot.tags.state as 'state',
                LOOKUP('us-region', tot.tags.region) AS 'region',
                tot.value as 'all_deaths',
                pni.value as 'pneumonia_influenza_deaths',
                pni.value/tot.value*100 as 'pneumonia_influenza_deaths, %',
                LOOKUP('city-size', CONCAT(tot.tags.city, ',', tot.tags.state)) AS 'population'
                FROM cdc.all_deaths tot
                JOIN cdc.pneumonia_and_influenza_deaths pni
                WHERE tot.entity = 'mr8w-325u' AND tot.tags.city IS NOT NULL
                AND pni.value > 1
                WITH row_number(tot.tags ORDER BY pni.value/tot.value DESC, tot.time DESC) <= 1
                ORDER BY 'pneumonia_influenza_deaths, %' DESC, pni.value DESC
                OPTION (ROW_MEMORY_THRESHOLD 600000)
                ]]>
            </queryText>
            <loops>10</loops>
        </query>
        <query>
            <testID>Partition--ROW-NUMBER-with-ORDER-BY-avg--long</testID>
            <queryText>
                <![CDATA[
                SELECT entity, tags.*, datetime, avg(value)
                FROM df.disk_used
                WHERE datetime BETWEEN "2016-01-01T12:00:00.000Z" AND "2016-12-25T12:00:00.000Z"
                AND tags.file_system LIKE '/dev/*'
                GROUP BY entity, tags, period(15 minute)
                WITH row_number(entity, tags ORDER BY avg(value) DESC) <= 3
                OPTION (ROW_MEMORY_THRESHOLD 1500000)
                ]]>
            </queryText>
            <loops>10</loops>
            <source>https://github.com/axibase/atsd-docs/blob/master/api/sql/examples/partition-row-number-top-N-tags.md#partition---row_number-with-order-by-avg</source>
        </query>

        <query>
            <testID>slow-scan--ticket-4039</testID>
            <queryText>
                <![CDATA[
                SELECT datetime, count(*)
                FROM 'chg.row_number.ijzp-q8t2'
                WHERE tags.primary_type = 'HOMICIDE'
                AND datetime >= '2016-01-01T00:00:00.000Z'
                --AND entity = 'ijzp-q8t2'
                GROUP BY PERIOD(1 month)
                ]]>
            </queryText>
            <loops>30</loops>
            <source>https://nur.axibase.com:41791/redmine/issues/4039</source>
        </query>
    </SQLqueries>



    <dataQueries>
        <dataQuery>
            <testID>data--jmeter-ok-count-metric</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2016-06-01T17:00:00Z",
                  "endDate":   "2017-02-15T18:00:00Z",
                  "entity": "hbs.axibase.com",
                  "metric": "jmeter.ok.count"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-1-day</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2017-02-19T17:00:00Z",
                  "endDate":   "2017-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-5-days</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2017-02-15T17:00:00Z",
                  "endDate":   "2017-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-10-days</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2017-02-10T17:00:00Z",
                  "endDate":   "2017-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-20-days</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2017-02-01T17:00:00Z",
                  "endDate":   "2017-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-40-days</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2017-01-10T17:00:00Z",
                  "endDate":   "2017-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-80-days</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2016-12-01T17:00:00Z",
                  "endDate":   "2017-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-160-days</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2016-09-10T17:00:00Z",
                  "endDate":   "2017-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-1-day-1-year-shift</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2016-02-19T17:00:00Z",
                  "endDate":   "2016-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-5-days-1-year-shift</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2016-02-15T17:00:00Z",
                  "endDate":   "2016-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-10-days-1-year-shift</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2016-02-10T17:00:00Z",
                  "endDate":   "2016-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-20-days-1-year-shift</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2016-02-01T17:00:00Z",
                  "endDate":   "2016-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-40-days-1-year-shift</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2016-01-10T17:00:00Z",
                  "endDate":   "2016-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-80-days-1-year-shift</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2015-12-01T17:00:00Z",
                  "endDate":   "2016-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--mpstat-cpu-busy-metric-160-days-1-year-shift</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "2015-09-10T17:00:00Z",
                  "endDate":   "2016-02-20T17:00:00Z",
                  "entity": "nurswghbs001",
                  "metric": "mpstat.cpu_busy"
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>

        <dataQuery>
            <testID>data--tag_expression--slow</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "1970-01-01T00:00:00Z",
                  "endDate":   "now",
                  "metric": "df.disk_used",
                  "entity": "nurswghbs001",
                  "tagExpression": "tags.file_system = '/dev/md3' && tags.mount_point = '/home'",
                  "limit": 5
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--fast</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "1970-01-01T00:00:00Z",
                  "endDate":   "now",
                  "metric": "df.disk_used",
                  "entity": "nurswghbs001",
                  "tags": {
                    "file_system": "/dev/md3",
                    "mount_point": "/home"
                  },
                  "limit": 5
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--like</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "1970-01-01T00:00:00Z",
                  "endDate":   "now",
                  "metric": "df.disk_used",
                  "entity": "nurswghbs001",
                  "tagExpression": "tags.file_system LIKE '/dev/*'",
                  "limit": 5
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--like-slow</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "1970-01-01T00:00:00Z",
                  "endDate":   "now",
                  "metric": "df.disk_used",
                  "entity": "nurswghbs001",
                  "tagExpression": "tags.file_system LIKE '/dev/*' && tags.mount_point = '/home'",
                  "limit": 5
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--wildcard</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "1970-01-01T00:00:00Z",
                  "endDate":   "now",
                  "metric": "df.disk_used",
                  "entity": "nurswghbs001",
                  "tagExpression": "tags.file_system = '/dev/*'",
                  "limit": 5
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--wildcard-slow</testID>
            <payload>
                <![CDATA[
                [{
                  "startDate": "1970-01-01T00:00:00Z",
                  "endDate":   "now",
                  "metric": "df.disk_used",
                  "entity": "nurswghbs001",
                  "tagExpression": "tags.file_system = '/dev/*' && tags.mount_point = '/home'",
                  "limit": 5
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>

        <dataQuery>
            <testID>data--tag_expression--expr-limit-1</testID>
            <payload>
                <![CDATA[
                [{
                "startDate": "1970-01-01T00:00:00Z",
                "endDate":   "now",
                "metric": "df.disk_used",
                "entity": "nurswghbs001",
                "tagExpression": "tags.file_system LIKE '/dev/*' && tags.mount_point = '/boot'",
                "limit": 1
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--expr-limit-20</testID>
            <payload>
                <![CDATA[
                [{
                "startDate": "1970-01-01T00:00:00Z",
                "endDate":   "now",
                "metric": "df.disk_used",
                "entity": "nurswghbs001",
                "tagExpression": "tags.file_system LIKE '/dev/*' && tags.mount_point = '/boot'",
                "limit": 20
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--expr+tags-limit-1</testID>
            <payload>
                <![CDATA[
                [{
                "startDate": "1970-01-01T00:00:00Z",
                "endDate":   "now",
                "metric": "df.disk_used",
                "entity": "nurswghbs001",
                "tags": {
                "file_system": "/dev/*",
                "mount_point": "/boot"
                },
                "tagExpression": "tags.file_system LIKE '/dev/*' && tags.mount_point = '/boot'",
                "limit": 1
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--expr+tags-limit-20</testID>
            <payload>
                <![CDATA[
                [{
                "startDate": "1970-01-01T00:00:00Z",
                "endDate":   "now",
                "metric": "df.disk_used",
                "entity": "nurswghbs001",
                "tags": {
                "file_system": "/dev/*",
                "mount_point": "/boot"
                },
                "tagExpression": "tags.file_system LIKE '/dev/*' && tags.mount_point = '/boot'",
                "limit": 20
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--tags-limit-1</testID>
            <payload>
                <![CDATA[
                [{
                "startDate": "1970-01-01T00:00:00Z",
                "endDate":   "now",
                "metric": "df.disk_used",
                "entity": "nurswghbs001",
                "tags": {
                "file_system": "/dev/*",
                "mount_point": "/boot"
                },
                "limit": 1
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--tags-limit-20</testID>
            <payload>
                <![CDATA[
                [{
                "startDate": "1970-01-01T00:00:00Z",
                "endDate":   "now",
                "metric": "df.disk_used",
                "entity": "nurswghbs001",
                "tags": {
                "file_system": "/dev/*",
                "mount_point": "/boot"
                },
                "limit": 20
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--tags+precise-limit-1</testID>
            <payload>
                <![CDATA[
                [{
                "startDate": "1970-01-01T00:00:00Z",
                "endDate":   "now",
                "metric": "df.disk_used",
                "entity": "nurswghbs001",
                "tags": {
                "file_system": "/dev/md1",
                "mount_point": "/boot"
                },
                "limit": 1
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--tags+precise-limit-20</testID>
            <payload>
                <![CDATA[
                [{
                "startDate": "1970-01-01T00:00:00Z",
                "endDate":   "now",
                "metric": "df.disk_used",
                "entity": "nurswghbs001",
                "tags": {
                "file_system": "/dev/md1",
                "mount_point": "/boot"
                },
                "limit": 20
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--expr+precise-limit-1</testID>
            <payload>
                <![CDATA[
                [{
                "startDate": "1970-01-01T00:00:00Z",
                "endDate":   "now",
                "metric": "df.disk_used",
                "entity": "nurswghbs001",
                "tagExpression": "tags.file_system = '/dev/md1' && tags.mount_point = '/boot'",
                "limit": 1
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--tag_expression--expr+precise-limit-20</testID>
            <payload>
                <![CDATA[
                [{
                "startDate": "1970-01-01T00:00:00Z",
                "endDate":   "now",
                "metric": "df.disk_used",
                "entity": "nurswghbs001",
                "tagExpression": "tags.file_system = '/dev/md1' && tags.mount_point = '/boot'",
                "limit": 20
                }]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>10</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--2240.config</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"325416e3d2d6","metric":"log_event_counter","tags":{"level":["INFO"],"command":["*"],"logger":["*"]},"aggregate":{"types":["DETAIL"]},"startDate":"2016-02-10T11:57:41.821Z","endDate":"2016-02-15T11:57:41.821Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--2339_bar.config</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"aixtest01","metric":"nmon.wlmcpu.cpu_percent","tags":{"id":["JAVA.G*"]},"aggregate":{"types":["AVG"],"period":{"count":1,"unit":"DAY"}},"startDate":"2015-12-01T00:00:00.000Z","endDate":"2015-12-02T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--2398_bar.config</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"aixtest01","metric":"nmon.wlmcpu.cpu_percent","tags":{"id":["JAVA.G*"]},"aggregate":{"types":["AVG"],"period":{"count":1,"unit":"DAY"}},"startDate":"2015-12-01T00:00:00.000Z","endDate":"2015-12-02T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--2503_pie.config</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"aixtest01","metric":"nmon.wlmcpu.cpu_percent","tags":{"id":["*"]},"aggregate":{"types":["AVG"],"period":{"count":1,"unit":"HOUR"}},"startDate":"2015-12-01T23:00:00.000Z","endDate":"2015-12-02T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--2893.config</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"NURSWGHBS001","metric":"log_event_counter","tags":{"level":["ERROR"],"command":["com.axibase.tsd.Server"],"logger":["com.axibase.tsd.web.DefaultExceptionHandler"]},"aggregate":{"types":["DETAIL"]},"startDate":"2016-06-13T00:00:00.000Z","endDate":"2016-06-15T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--2893.config--1</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"NURSWGHBS001","metric":"log_event_counter","tags":{"level":["ERROR"],"command":["com.axibase.tsd.Server"],"logger":["com.axibase.tsd.web.DefaultExceptionHandler"]},"aggregate":{"types":["COUNTER"],"period":{"count":1,"unit":"DAY"}},"startDate":"2016-06-13T00:00:00.000Z","endDate":"2016-06-15T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--2952.config</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"NURSWGHBS001","metric":"log_event_counter","tags":{"level":["ERROR"],"command":["*"],"logger":["*"]},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-04T00:00:00.000Z","endDate":"2017-04-06T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--2952.config--1</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"NURSWGHBS001","metric":"log_event_counter","tags":{"level":["ERROR"],"command":["*"],"logger":["*"]},"aggregate":{"types":["COUNTER"],"period":{"count":1,"unit":"DAY"}},"startDate":"2017-04-04T00:00:00.000Z","endDate":"2017-04-06T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--2953.config</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"NURSWGHBS001","metric":"log_event_counter","tags":{"level":["ERROR"],"command":["*"],"logger":["*"]},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-04T00:00:00.000Z","endDate":"2017-04-06T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--2953.config--1</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"NURSWGHBS001","metric":"log_event_counter","tags":{"level":["ERROR"],"command":["*"],"logger":["*"]},"aggregate":{"types":["COUNTER"],"period":{"count":1,"unit":"DAY","align":"END_TIME"}},"startDate":"2017-04-04T00:00:00.000Z","endDate":"2017-04-06T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--2954.config</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"NURSWGHBS001","metric":"log_event_counter","tags":{"level":["ERROR"],"command":["*"],"logger":["*"]},"aggregate":{"types":["COUNTER"],"period":{"count":1,"unit":"DAY","align":"END_TIME"}},"startDate":"2017-04-04T00:00:00.000Z","endDate":"2017-04-05T16:04:38.110Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--3242tags.config</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"f7nd-jj28","metric":"f7nd-jj28.value","seriesLimit":5,"tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2000-01-01T00:00:00.000Z","endDate":"9999-12-31T23:59:59.999Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--3941.config</testID>
            <payload>
                <![CDATA[
                [{"addMeta":true,"cache":false,"entities":["ca.oro","ca.cle","ca.dnp","ca.exc","ca.fol","ca.mil","ca.nml","ca.pnf","ca.sha","ca.snl"],"metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--3941.config--1</testID>
            <payload>
                <![CDATA[
                [{"addMeta":true,"cache":false,"entities":["ca.oro","ca.cle","ca.dnp","ca.exc","ca.fol","ca.mil","ca.nml","ca.pnf","ca.sha","ca.snl"],"metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--3941.config--2</testID>
            <payload>
                <![CDATA[
                [{"addMeta":true,"cache":false,"entity":"ca.oro","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-06T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--3941.config--3</testID>
            <payload>
                <![CDATA[
                [{"addMeta":true,"cache":false,"entity":"ca.oro","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"0","timeFormat":"milliseconds"},{"addMeta":true,"cache":false,"entity":"ca.cle","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"1","timeFormat":"milliseconds"},{"addMeta":true,"cache":false,"entity":"ca.dnp","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"2","timeFormat":"milliseconds"},{"addMeta":true,"cache":false,"entity":"ca.exc","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"3","timeFormat":"milliseconds"},{"addMeta":true,"cache":false,"entity":"ca.fol","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"4","timeFormat":"milliseconds"},{"addMeta":true,"cache":false,"entity":"ca.mil","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"5","timeFormat":"milliseconds"},{"addMeta":true,"cache":false,"entity":"ca.nml","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"6","timeFormat":"milliseconds"},{"addMeta":true,"cache":false,"entity":"ca.pnf","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"7","timeFormat":"milliseconds"},{"addMeta":true,"cache":false,"entity":"ca.sha","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"8","timeFormat":"milliseconds"},{"addMeta":true,"cache":false,"entity":"ca.snl","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-02T12:00:00.000Z","endDate":"2017-04-05T18:00:00.000Z","requestId":"9","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--3941_entityTag.config</testID>
            <payload>
                <![CDATA[
                [{"addMeta":true,"cache":false,"entities":["ca.alm","ca.ant","ca.ber","ca.blb","ca.boc","ca.buc","ca.bul","ca.cas","ca.cfw","ca.cle","ca.cmn","ca.coy","ca.dav","ca.dnn","ca.dnp","ca.eng","ca.epk","ca.exc","ca.fol","ca.frd","ca.frm","ca.hid","ca.ich","ca.inv","ca.isb","ca.kes","ca.lew","ca.lon","ca.mcs","ca.mil","ca.mrt","ca.nhg","ca.nml","ca.oro","ca.par","ca.pnf","ca.pra","ca.prs","ca.pym","ca.sat","ca.scc","ca.sha","ca.slb","ca.snl","ca.stg","ca.stp","ca.tab","ca.trm","ca.unv","ca.whi","ca.wrs"],"metric":"ca.reservoir_elevation_feet","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-04T16:04:31.878Z","endDate":"2017-04-05T16:04:31.878Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--issues--3941_entityTag.config--1</testID>
            <payload>
                <![CDATA[
                [{"addMeta":true,"cache":false,"entity":"ca.oro","metric":"ca.reservoir_storage_af","tags":{},"aggregate":{"types":["DETAIL"]},"startDate":"2017-04-04T16:04:31.964Z","endDate":"2017-04-05T18:28:31.964Z","requestId":"0","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--widgets_demo_preprocessing.config</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["default"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["wind"],"country":["DE"],"connecting_area":["Tennet (DE)"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"1","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["wind"],"country":["DE"],"connecting_area":["Amprion"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"2","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["wind"],"country":["DE"],"connecting_area":["50Hertz"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"3","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["wind"],"country":["DE"],"connecting_area":["TransnetBW"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"4","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["solar"],"country":["DE"],"connecting_area":["Tennet (DE)"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"5","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["solar"],"country":["DE"],"connecting_area":["Amprion"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"6","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["solar"],"country":["DE"],"connecting_area":["50Hertz"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"7","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["solar"],"country":["DE"],"connecting_area":["TransnetBW"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"8","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
        <dataQuery>
            <testID>data--widgets_demo_preprocessing.config--1</testID>
            <payload>
                <![CDATA[
                [{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["solar"],"country":["DE"],"connecting_area":["Tennet (DE)"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"0","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["solar"],"country":["DE"],"connecting_area":["Amprion"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"1","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["solar"],"country":["DE"],"connecting_area":["50Hertz"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"2","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["solar"],"country":["DE"],"connecting_area":["TransnetBW"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"3","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["wind"],"country":["DE"],"connecting_area":["Tennet (DE)"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"4","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["wind"],"country":["DE"],"connecting_area":["Amprion"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"5","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["wind"],"country":["DE"],"connecting_area":["50Hertz"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"6","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["wind"],"country":["DE"],"connecting_area":["TransnetBW"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"7","timeFormat":"milliseconds"},{"cache":false,"entity":"eex","metric":"eex.energy","tags":{"fuel":["default"]},"aggregate":{"types":["DETAIL"]},"startDate":"2014-12-12T00:00:00.000Z","endDate":"2014-12-13T00:00:00.000Z","requestId":"8","timeFormat":"milliseconds"}]
                ]]>
            </payload>
            <path>/api/v1/series/query</path>
            <method>POST</method>
            <loops>30</loops>
        </dataQuery>
    </dataQueries>
</test>
